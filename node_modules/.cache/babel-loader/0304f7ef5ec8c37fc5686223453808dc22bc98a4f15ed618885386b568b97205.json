{"ast":null,"code":"import { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation.mjs';\nimport '../../utils/client/base.mjs';\nimport { getPresignedGetObjectUrl } from '../../utils/client/getObject.mjs';\nimport '../../utils/client/listObjectsV2.mjs';\nimport '../../utils/client/putObject.mjs';\nimport '../../utils/client/createMultipartUpload.mjs';\nimport '../../utils/client/uploadPart.mjs';\nimport '../../utils/client/completeMultipartUpload.mjs';\nimport '../../utils/client/listParts.mjs';\nimport '../../utils/client/abortMultipartUpload.mjs';\nimport '../../utils/client/copyObject.mjs';\nimport '../../utils/client/headObject.mjs';\nimport '../../utils/client/deleteObject.mjs';\nimport '@smithy/md5-js';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../utils/client/runtime/s3TransferHandler/fetch.mjs';\nimport 'fast-xml-parser';\nimport '../../utils/client/runtime/s3TransferHandler/xhr.mjs';\nimport 'buffer';\nimport { resolveS3ConfigAndInput } from '../../utils/resolveS3ConfigAndInput.mjs';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError.mjs';\nimport '../../../../utils/logger.mjs';\nimport { validateStorageOperationInput } from '../../utils/validateStorageOperationInput.mjs';\nimport { DEFAULT_PRESIGN_EXPIRATION, STORAGE_INPUT_KEY, MAX_URL_EXPIRATION } from '../../utils/constants.mjs';\nimport { constructContentDisposition } from '../../utils/constructContentDisposition.mjs';\nimport { getProperties } from './getProperties.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getUrl = async (amplify, input) => {\n  const {\n    options: getUrlOptions\n  } = input;\n  const {\n    s3Config,\n    keyPrefix,\n    bucket,\n    identityId\n  } = await resolveS3ConfigAndInput(amplify, getUrlOptions);\n  const {\n    inputType,\n    objectKey\n  } = validateStorageOperationInput(input, identityId);\n  const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n  if (getUrlOptions?.validateObjectExistence) {\n    await getProperties(amplify, input, StorageAction.GetUrl);\n  }\n  let urlExpirationInSec = getUrlOptions?.expiresIn ?? DEFAULT_PRESIGN_EXPIRATION;\n  const resolvedCredential = typeof s3Config.credentials === 'function' ? await s3Config.credentials() : s3Config.credentials;\n  const awsCredExpiration = resolvedCredential.expiration;\n  if (awsCredExpiration) {\n    const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n    urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n  }\n  const maxUrlExpirationInSec = MAX_URL_EXPIRATION / 1000;\n  assertValidationError(urlExpirationInSec <= maxUrlExpirationInSec, StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n  // expiresAt is the minimum of credential expiration and url expiration\n  return {\n    url: await getPresignedGetObjectUrl({\n      ...s3Config,\n      credentials: resolvedCredential,\n      expiration: urlExpirationInSec\n    }, {\n      Bucket: bucket,\n      Key: finalKey,\n      ...(getUrlOptions?.contentDisposition && {\n        ResponseContentDisposition: constructContentDisposition(getUrlOptions.contentDisposition)\n      }),\n      ...(getUrlOptions?.contentType && {\n        ResponseContentType: getUrlOptions.contentType\n      })\n    }),\n    expiresAt: new Date(Date.now() + urlExpirationInSec * 1000)\n  };\n};\nexport { getUrl };","map":{"version":3,"names":["getUrl","amplify","input","options","getUrlOptions","s3Config","keyPrefix","bucket","identityId","resolveS3ConfigAndInput","inputType","objectKey","validateStorageOperationInput","finalKey","STORAGE_INPUT_KEY","validateObjectExistence","getProperties","StorageAction","GetUrl","urlExpirationInSec","expiresIn","DEFAULT_PRESIGN_EXPIRATION","resolvedCredential","credentials","awsCredExpiration","expiration","awsCredExpirationInSec","Math","floor","getTime","Date","now","min","maxUrlExpirationInSec","MAX_URL_EXPIRATION","assertValidationError","StorageValidationErrorCode","UrlExpirationMaxLimitExceed","url","getPresignedGetObjectUrl","Bucket","Key","contentDisposition","ResponseContentDisposition","constructContentDisposition","contentType","ResponseContentType","expiresAt"],"sources":["/Users/kriziafrias/Documents/GitHub/hbaacademy/node_modules/@aws-amplify/storage/src/providers/s3/apis/internal/getUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { StorageValidationErrorCode } from '../../../../errors/types/validation';\nimport { getPresignedGetObjectUrl } from '../../utils/client';\nimport { resolveS3ConfigAndInput, validateStorageOperationInput, } from '../../utils';\nimport { assertValidationError } from '../../../../errors/utils/assertValidationError';\nimport { DEFAULT_PRESIGN_EXPIRATION, MAX_URL_EXPIRATION, STORAGE_INPUT_KEY, } from '../../utils/constants';\nimport { constructContentDisposition } from '../../utils/constructContentDisposition';\nimport { getProperties } from './getProperties';\nexport const getUrl = async (amplify, input) => {\n    const { options: getUrlOptions } = input;\n    const { s3Config, keyPrefix, bucket, identityId } = await resolveS3ConfigAndInput(amplify, getUrlOptions);\n    const { inputType, objectKey } = validateStorageOperationInput(input, identityId);\n    const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    if (getUrlOptions?.validateObjectExistence) {\n        await getProperties(amplify, input, StorageAction.GetUrl);\n    }\n    let urlExpirationInSec = getUrlOptions?.expiresIn ?? DEFAULT_PRESIGN_EXPIRATION;\n    const resolvedCredential = typeof s3Config.credentials === 'function'\n        ? await s3Config.credentials()\n        : s3Config.credentials;\n    const awsCredExpiration = resolvedCredential.expiration;\n    if (awsCredExpiration) {\n        const awsCredExpirationInSec = Math.floor((awsCredExpiration.getTime() - Date.now()) / 1000);\n        urlExpirationInSec = Math.min(awsCredExpirationInSec, urlExpirationInSec);\n    }\n    const maxUrlExpirationInSec = MAX_URL_EXPIRATION / 1000;\n    assertValidationError(urlExpirationInSec <= maxUrlExpirationInSec, StorageValidationErrorCode.UrlExpirationMaxLimitExceed);\n    // expiresAt is the minimum of credential expiration and url expiration\n    return {\n        url: await getPresignedGetObjectUrl({\n            ...s3Config,\n            credentials: resolvedCredential,\n            expiration: urlExpirationInSec,\n        }, {\n            Bucket: bucket,\n            Key: finalKey,\n            ...(getUrlOptions?.contentDisposition && {\n                ResponseContentDisposition: constructContentDisposition(getUrlOptions.contentDisposition),\n            }),\n            ...(getUrlOptions?.contentType && {\n                ResponseContentType: getUrlOptions.contentType,\n            }),\n        }),\n        expiresAt: new Date(Date.now() + urlExpirationInSec * 1000),\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASY,MAACA,MAAM,GAAG,MAAAA,CAAOC,OAAO,EAAEC,KAAK,KAAK;EAC5C,MAAM;IAAEC,OAAO,EAAEC;EAAa,CAAE,GAAGF,KAAK;EACxC,MAAM;IAAEG,QAAQ;IAAEC,SAAS;IAAEC,MAAM;IAAEC;EAAU,CAAE,GAAG,MAAMC,uBAAuB,CAACR,OAAO,EAAEG,aAAa,CAAC;EACzG,MAAM;IAAEM,SAAS;IAAEC;EAAS,CAAE,GAAGC,6BAA6B,CAACV,KAAK,EAAEM,UAAU,CAAC;EACjF,MAAMK,QAAQ,GAAGH,SAAS,KAAKI,iBAAiB,GAAGR,SAAS,GAAGK,SAAS,GAAGA,SAAS;EACpF,IAAIP,aAAa,EAAEW,uBAAuB,EAAE;IACxC,MAAMC,aAAa,CAACf,OAAO,EAAEC,KAAK,EAAEe,aAAa,CAACC,MAAM,CAAC;EACjE;EACI,IAAIC,kBAAkB,GAAGf,aAAa,EAAEgB,SAAS,IAAIC,0BAA0B;EAC/E,MAAMC,kBAAkB,GAAG,OAAOjB,QAAQ,CAACkB,WAAW,KAAK,UAAU,GAC/D,MAAMlB,QAAQ,CAACkB,WAAW,EAAE,GAC5BlB,QAAQ,CAACkB,WAAW;EAC1B,MAAMC,iBAAiB,GAAGF,kBAAkB,CAACG,UAAU;EACvD,IAAID,iBAAiB,EAAE;IACnB,MAAME,sBAAsB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,iBAAiB,CAACK,OAAO,EAAE,GAAGC,IAAI,CAACC,GAAG,EAAE,IAAI,IAAI,CAAC;IAC5FZ,kBAAkB,GAAGQ,IAAI,CAACK,GAAG,CAACN,sBAAsB,EAAEP,kBAAkB,CAAC;EACjF;EACI,MAAMc,qBAAqB,GAAGC,kBAAkB,GAAG,IAAI;EACvDC,qBAAqB,CAAChB,kBAAkB,IAAIc,qBAAqB,EAAEG,0BAA0B,CAACC,2BAA2B,CAAC;EAC9H;EACI,OAAO;IACHC,GAAG,EAAE,MAAMC,wBAAwB,CAAC;MAChC,GAAGlC,QAAQ;MACXkB,WAAW,EAAED,kBAAkB;MAC/BG,UAAU,EAAEN;IACxB,CAAS,EAAE;MACCqB,MAAM,EAAEjC,MAAM;MACdkC,GAAG,EAAE5B,QAAQ;MACb,IAAIT,aAAa,EAAEsC,kBAAkB,IAAI;QACrCC,0BAA0B,EAAEC,2BAA2B,CAACxC,aAAa,CAACsC,kBAAkB;MACxG,CAAa,CAAC;MACF,IAAItC,aAAa,EAAEyC,WAAW,IAAI;QAC9BC,mBAAmB,EAAE1C,aAAa,CAACyC;MACnD,CAAa;IACb,CAAS,CAAC;IACFE,SAAS,EAAE,IAAIjB,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAGZ,kBAAkB,GAAG,IAAI;EAClE,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}