{"ast":null,"code":"import { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { resolvePrefix } from '../../../utils/resolvePrefix.mjs';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A `StorageError` with `error.name` from `StorageValidationErrorCode` indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nconst resolveS3ConfigAndInput = async (amplify, apiOptions) => {\n  /**\n   * IdentityId is always cached in memory so we can safely make calls here. It\n   * should be stable even for unauthenticated users, regardless of credentials.\n   */\n  const {\n    identityId\n  } = await amplify.Auth.fetchAuthSession();\n  assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n  /**\n   * A credentials provider function instead of a static credentials object is\n   * used because the long-running tasks like multipart upload may span over the\n   * credentials expiry. Auth.fetchAuthSession() automatically refreshes the\n   * credentials if they are expired.\n   */\n  const credentialsProvider = async () => {\n    const {\n      credentials\n    } = await amplify.Auth.fetchAuthSession();\n    assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n    return credentials;\n  };\n  const {\n    bucket: defaultBucket,\n    region: defaultRegion,\n    dangerouslyConnectToHttpEndpointForTesting,\n    buckets\n  } = amplify.getConfig()?.Storage?.S3 ?? {};\n  const {\n    bucket = defaultBucket,\n    region = defaultRegion\n  } = apiOptions?.bucket && resolveBucketConfig(apiOptions, buckets) || {};\n  assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n  assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n  const {\n    defaultAccessLevel,\n    prefixResolver = resolvePrefix,\n    isObjectLockEnabled\n  } = amplify.libraryOptions?.Storage?.S3 ?? {};\n  const keyPrefix = await prefixResolver({\n    accessLevel: apiOptions?.accessLevel ?? defaultAccessLevel ?? DEFAULT_ACCESS_LEVEL,\n    // use conditional assign to make tsc happy because StorageOptions is a union type that may not have targetIdentityId\n    targetIdentityId: apiOptions?.accessLevel === 'protected' ? apiOptions?.targetIdentityId ?? identityId : identityId\n  });\n  return {\n    s3Config: {\n      credentials: credentialsProvider,\n      region,\n      useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n      ...(dangerouslyConnectToHttpEndpointForTesting ? {\n        customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n        forcePathStyle: true\n      } : {})\n    },\n    bucket,\n    keyPrefix,\n    identityId,\n    isObjectLockEnabled\n  };\n};\nconst resolveBucketConfig = (apiOptions, buckets) => {\n  if (typeof apiOptions.bucket === 'string') {\n    const bucketConfig = buckets?.[apiOptions.bucket];\n    assertValidationError(!!bucketConfig, StorageValidationErrorCode.InvalidStorageBucket);\n    return {\n      bucket: bucketConfig.bucketName,\n      region: bucketConfig.region\n    };\n  }\n  if (typeof apiOptions.bucket === 'object') {\n    return {\n      bucket: apiOptions.bucket.bucketName,\n      region: apiOptions.bucket.region\n    };\n  }\n};\nexport { resolveS3ConfigAndInput };","map":{"version":3,"names":["resolveS3ConfigAndInput","amplify","apiOptions","identityId","Auth","fetchAuthSession","assertValidationError","StorageValidationErrorCode","NoIdentityId","credentialsProvider","credentials","NoCredentials","bucket","defaultBucket","region","defaultRegion","dangerouslyConnectToHttpEndpointForTesting","buckets","getConfig","Storage","S3","resolveBucketConfig","NoBucket","NoRegion","defaultAccessLevel","prefixResolver","resolvePrefix","isObjectLockEnabled","libraryOptions","keyPrefix","accessLevel","DEFAULT_ACCESS_LEVEL","targetIdentityId","s3Config","useAccelerateEndpoint","customEndpoint","LOCAL_TESTING_S3_ENDPOINT","forcePathStyle","bucketConfig","InvalidStorageBucket","bucketName"],"sources":["/Users/kriziafrias/Documents/GitHub/hbaacademy/node_modules/.pnpm/@aws-amplify+storage@6.6.5_@aws-amplify+core@6.4.0/node_modules/@aws-amplify/storage/src/providers/s3/utils/resolveS3ConfigAndInput.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { StorageValidationErrorCode } from '../../../errors/types/validation';\nimport { resolvePrefix as defaultPrefixResolver } from '../../../utils/resolvePrefix';\nimport { DEFAULT_ACCESS_LEVEL, LOCAL_TESTING_S3_ENDPOINT } from './constants';\n/**\n * resolve the common input options for S3 API handlers from Amplify configuration and library options.\n *\n * @param {AmplifyClassV6} amplify The Amplify instance.\n * @param {S3ApiOptions} apiOptions The input options for S3 provider.\n * @returns {Promise<ResolvedS3ConfigAndInput>} The resolved common input options for S3 API handlers.\n * @throws A `StorageError` with `error.name` from `StorageValidationErrorCode` indicating invalid\n *   configurations or Amplify library options.\n *\n * @internal\n */\nexport const resolveS3ConfigAndInput = async (amplify, apiOptions) => {\n    /**\n     * IdentityId is always cached in memory so we can safely make calls here. It\n     * should be stable even for unauthenticated users, regardless of credentials.\n     */\n    const { identityId } = await amplify.Auth.fetchAuthSession();\n    assertValidationError(!!identityId, StorageValidationErrorCode.NoIdentityId);\n    /**\n     * A credentials provider function instead of a static credentials object is\n     * used because the long-running tasks like multipart upload may span over the\n     * credentials expiry. Auth.fetchAuthSession() automatically refreshes the\n     * credentials if they are expired.\n     */\n    const credentialsProvider = async () => {\n        const { credentials } = await amplify.Auth.fetchAuthSession();\n        assertValidationError(!!credentials, StorageValidationErrorCode.NoCredentials);\n        return credentials;\n    };\n    const { bucket: defaultBucket, region: defaultRegion, dangerouslyConnectToHttpEndpointForTesting, buckets, } = amplify.getConfig()?.Storage?.S3 ?? {};\n    const { bucket = defaultBucket, region = defaultRegion } = (apiOptions?.bucket && resolveBucketConfig(apiOptions, buckets)) || {};\n    assertValidationError(!!bucket, StorageValidationErrorCode.NoBucket);\n    assertValidationError(!!region, StorageValidationErrorCode.NoRegion);\n    const { defaultAccessLevel, prefixResolver = defaultPrefixResolver, isObjectLockEnabled, } = amplify.libraryOptions?.Storage?.S3 ?? {};\n    const keyPrefix = await prefixResolver({\n        accessLevel: apiOptions?.accessLevel ?? defaultAccessLevel ?? DEFAULT_ACCESS_LEVEL,\n        // use conditional assign to make tsc happy because StorageOptions is a union type that may not have targetIdentityId\n        targetIdentityId: apiOptions?.accessLevel === 'protected'\n            ? (apiOptions?.targetIdentityId ?? identityId)\n            : identityId,\n    });\n    return {\n        s3Config: {\n            credentials: credentialsProvider,\n            region,\n            useAccelerateEndpoint: apiOptions?.useAccelerateEndpoint,\n            ...(dangerouslyConnectToHttpEndpointForTesting\n                ? {\n                    customEndpoint: LOCAL_TESTING_S3_ENDPOINT,\n                    forcePathStyle: true,\n                }\n                : {}),\n        },\n        bucket,\n        keyPrefix,\n        identityId,\n        isObjectLockEnabled,\n    };\n};\nconst resolveBucketConfig = (apiOptions, buckets) => {\n    if (typeof apiOptions.bucket === 'string') {\n        const bucketConfig = buckets?.[apiOptions.bucket];\n        assertValidationError(!!bucketConfig, StorageValidationErrorCode.InvalidStorageBucket);\n        return { bucket: bucketConfig.bucketName, region: bucketConfig.region };\n    }\n    if (typeof apiOptions.bucket === 'object') {\n        return {\n            bucket: apiOptions.bucket.bucketName,\n            region: apiOptions.bucket.region,\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}